% This program bootstraps an AR(K)regression
% The data are generated by a chosen DGP and then estimated and
% bootstrapped.  The estimated variance and bootstrapped variances are 
% compared for three estimators.
clear

J = 1000; %number of Monte Carlos
N = 200; %number of bootstrap iterations
T = 30; %number of observations
K = 8; %number of lags
A0 = .9; %coefficents to transform independent errors into correlated errors
% Construct Data
beta0 = .008 ; %constant 
betaL = [.25; .11; -.03; -.004; -.12; .03; -.02; -.08];

Sighat_avg = 0;
Sigboot1_avg = 0;
Sigboot2_avg = 0;
for j=1:J
    j
    eps = random('Normal',0,1,T+K,1)*A0;
    ylong = zeros(T+K,1); %initialize the time series
    %constuct y according to specified AR process
    for t=1:T+K
        ylong(t,:) = ylong(t,:) + beta0 + eps(t,:);
        for k=1:K
            if t-k>0
                ylong(t,:) = ylong(t,:) + ylong(t-k,:)*betaL(k);
            end
        end
    end
    y = ylong(K+1:T+K,:);
    x = ones(T,1);
    %add lagged values of y into x matrix
    for k=1:K
        x = [x  ylong(K+1-k:T+K-k,:)];
    end
       

    % ESTIMATE REGRESSION
    %regression 1 coeffs are in column 1, regression 2 are in column 2
    XX = (x'*x)^(-1);
    betahat = XX*x'*y;  
    epshat = y - x*betahat;  %calculate errors
    %construct var-covar matrix
    Sighat = (epshat'*epshat)/(T-(K+1));
    beta0hat = betahat(1,:);
    betaLhat = zeros(K,1);
    for k=1:K
        betaLhat(k) = betahat(k+1);
    end

    % PERFORM BOOTSTRAP
    % initialize averages of two sigma matrices
    Sigboot1 = 0;
    Sigboot2 = 0;
    for n=1:N
        %draw 1st K observations
        draw = unidrnd(T+K,K,1); %chose random draws with replacement for 1st K terms
        ylongnew = ylong(draw,:);
        %interatively construct last T observations
        draw = unidrnd(T,T,1);  %chose random draws with replacement for errors
        epsnew = epshat(draw,:);  %create new error series
        %constuct y according to specified AR process
        ylongnew = zeros(T+K,1); %initialize the time series
        for t=K+1:T+K
            ylongnew(t,:) = ylongnew(t,:) + beta0hat + epsnew(t-K,:);
            for k=1:K
                ylongnew(t,:) = ylongnew(t,:) + ylongnew(t-k,:)*betaLhat(k);
            end
        end
        ynew = ylongnew(K+1:T+K,:);
        xnew = ones(T,1);
        %add lagged values of y into x matrix
        for k=1:K
            xnew = [xnew  ylongnew(K+1-k:T+K-k,:)];
        end
        % estimate using OLS
        XXnew = (xnew'*xnew)^(-1);
        betatilde = XXnew*xnew'*ynew; %calculate and store the estimated betas
        epstilde = ynew - xnew*betatilde;  %calculate errors
        %construct var-covar matrix
        Sigtilde1 = (epstilde'*epstilde)/(T-(K+1)); %wrong way
        Sigtilde2 = (epstilde'*epstilde)*(T/(T-(K+1))^2); %right way
        Sigboot1 = Sigboot1 + Sigtilde1/N;
        Sigboot2 = Sigboot2 + Sigtilde2/N;    
    end
Sighat_avg = Sighat_avg+Sighat/J;    
Sigboot1_avg = Sigboot1_avg+Sigboot1/J;    
Sigboot2_avg = Sigboot2_avg+Sigboot2/J;    
end

% ANALYZE THE BOOTSTRAP RESULTS
disp('"true" value of sigma');
Sigma =A0^2
disp('estimate from original regression');
Sighat_avg
disp('average of "common" estimate over the bootstrap iterations');
Sigboot1_avg
disp('average of "correct" estimate over the bootstrap iterations');
Sigboot2_avg